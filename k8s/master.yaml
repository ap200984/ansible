---
- name: Configure Kubernetes Master Node
  hosts: master
  become: yes

  vars:
    # Easily change the Kubernetes version here
    k8s_version: "1.32"

  pre_tasks:
    - name: Gather system information
      ansible.builtin.setup:
        gather_subset:
          - distribution
          - distribution_release

    - name: Determine Docker repo based on Debian release
      set_fact:
        docker_repo_release: >-
          {% if ansible_distribution_release == 'bullseye' %}
          bullseye
          {% elif ansible_distribution_release == 'bookworm' %}
          bookworm
          {% else %}
          bullseye   # Fallback (adjust as needed)
          {% endif %}

  tasks:
    - name: Update APT cache
      apt:
        update_cache: yes

    - name: Upgrade all packages (dist upgrade)
      apt:
        upgrade: dist
        update_cache: yes

    - name: Install required packages
      apt:
        name:
          - software-properties-common
          - apt-transport-https
          - ca-certificates
          - gnupg2
          - gpg
          - sudo
          - curl
        state: present
        update_cache: yes

    - name: Disable swap
      command: swapoff -a

    - name: Comment out swap in /etc/fstab
      lineinfile:
        path: /etc/fstab
        regexp: "^([^#].*swap.*)"
        line: '#\1'

    - name: Remove swap file
      file:
        path: /swap.img
        state: absent

    - name: Load overlay kernel module
      modprobe:
        name: overlay
        state: present

    - name: Load br_netfilter kernel module
      modprobe:
        name: br_netfilter
        state: present

    - name: Ensure overlay is configured to load at boot
      lineinfile:
        path: /etc/modules
        line: "overlay"
        create: yes
        state: present

    - name: Ensure br_netfilter is configured to load at boot
      lineinfile:
        path: /etc/modules
        line: "br_netfilter"
        create: yes
        state: present

    - name: Enable IPv4 forwarding
      sysctl:
        name: net.ipv4.ip_forward
        value: "1"
        state: present
        reload: yes

    - name: Create /etc/apt/keyrings directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: "0755"

    - name: Download Kubernetes GPG key
      get_url:
        url: https://pkgs.k8s.io/core:/stable:/v{{ k8s_version }}/deb/Release.key
        dest: /tmp/k8s-release.key

    - name: Remove old keyring file if it exists
      file:
        path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        state: absent

    - name: Dearmor and store the Kubernetes GPG key
      command: gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /tmp/k8s-release.key

    - name: Add Kubernetes repo
      apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ k8s_version }}/deb/ /"
        state: present

    - name: Update APT cache after adding Kubernetes repo
      apt:
        update_cache: yes

    - name: Install kubelet, kubeadm, and kubectl
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present

    - name: Mark kubelet, kubeadm, kubectl as held
      command: "apt-mark hold kubelet kubeadm kubectl"

    - name: Enable and start kubelet service
      systemd:
        name: kubelet
        enabled: yes
        state: started

    - name: Add Docker GPG key for Debian
      apt_key:
        url: https://download.docker.com/linux/debian/gpg
        state: present

    - name: Add Docker repository for Debian
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/debian {{ docker_repo_release }} stable"
        state: present

    - name: Update APT cache after adding Docker repo
      apt:
        update_cache: yes

    - name: Install containerd
      apt:
        name: containerd
        state: present

    - name: Configure containerd
      shell: |
        mkdir -p /etc/containerd
        containerd config default | tee /etc/containerd/config.toml
      args:
        creates: /etc/containerd/config.toml

    - name: Restart containerd
      systemd:
        name: containerd
        enabled: yes
        state: restarted

    - name: Initialize Kubernetes master node
      shell: |
        kubeadm init --pod-network-cidr=10.244.0.0/16
      args:
        creates: /etc/kubernetes/admin.conf

    - name: Ensure /root/.kube directory exists
      file:
        path: /root/.kube
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Set up kubectl for the root user
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /root/.kube/config
        remote_src: yes
        owner: root
        group: root
        mode: '0600'

    - name: Deploy Flannel pod network
      shell: |
        kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml
      args:
        executable: /bin/bash

    - name: Generate join command
      command: kubeadm token create --print-join-command
      register: kubeadm_join_cmd
      vars:
        ansible_stat_path: /etc/kubernetes/admin.conf
      check_mode: no

    - name: Save join command to /etc/kubernetes/join.txt
      copy:
        content: "{{ kubeadm_join_cmd.stdout }}"
        dest: /etc/kubernetes/join.txt
        mode: '0600'
      when: kubeadm_join_cmd is defined

