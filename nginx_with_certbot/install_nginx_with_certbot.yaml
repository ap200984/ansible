---
- name: Deploy Nginx and Certbot containers
  hosts: all
  become: yes

  tasks:
    - name: Include secrets
      include_vars: ../secrets/lets_encrypt.yml

    - name: Ensure necessary directories exist
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: directory
        owner: "{{ item.owner }}"
        group: "{{ item.group }}"
        mode: "{{ item.mode }}"
      loop:
        - { path: '/var/log/nginx', owner: 'root', group: 'root', mode: '0755' }
        - { path: '/etc/nginx/conf.d', owner: 'root', group: 'root', mode: '0755' }
        - { path: '/etc/letsencrypt', owner: 'root', group: 'root', mode: '0755' }
        - { path: '/var/lib/letsencrypt', owner: 'root', group: 'root', mode: '0755' }
        - { path: '/var/log/letsencrypt', owner: 'root', group: 'root', mode: '0755' }
        - { path: '/var/www/html', owner: 'www-data', group: 'www-data', mode: '0755' }

    - name: Check if nginx.conf exists
      ansible.builtin.stat:
        path: /etc/nginx/nginx.conf
      register: nginx_conf

    - name: Deploy temporary Nginx container to populate config if nginx.conf is missing
      docker_container:
        name: temporary-nginx
        image: nginx
        state: started
        volumes:
          - "/etc/nginx:/etc/nginx_target"
        command: "/bin/sh -c 'cp -ar /etc/nginx/* /etc/nginx_target/ && sleep 10'"
      when: not nginx_conf.stat.exists

    - name: Stop temporary Nginx container
      docker_container:
        name: temporary-nginx
        state: absent
      when: not nginx_conf.stat.exists

    - name: Template Nginx configuration files for subdomains
      ansible.builtin.template:
        src: "./templates/subdomain.conf.j2"
        dest: "/etc/nginx/conf.d/{{ item.split(':')[0] }}.conf"
      vars:
        subdomain: "{{ item.split(':')[0] }}"
        port: "{{ item.split(':')[1] }}"
      loop: "{{ subdomains_ports }}"

    - name: Pull the Nginx Docker image
      docker_image:
        name: nginx
        source: pull

    - name: Create Nginx container
      docker_container:
        name: nginx
        image: nginx
        state: started
        restart_policy: always
        published_ports:
          - "80:80"
          - "443:443"
        volumes:
          - "/var/log/nginx:/var/log/nginx"
          - "/etc/nginx:/etc/nginx"
          - "/etc/letsencrypt:/etc/letsencrypt"
          - "/var/www/html:/var/www/html"
        env:
          VIRTUAL_HOST: "{{ domain }}"
          LETSENCRYPT_HOST: "{{ domain }}"
          LETSENCRYPT_EMAIL: "{{ lets_encrypt_email }}"

    - name: Pull the Certbot Docker image
      docker_image:
        name: certbot/certbot
        source: pull

    - name: Create Certbot container
      docker_container:
        name: certbot
        image: certbot/certbot
        state: started
        restart_policy: always
        entrypoint: /bin/sh
        command: >
          -c "apk add --no-cache --update py3-pip nginx &&
              pip install certbot-nginx &&
              certbot --nginx --email {{ lets_encrypt_email }} --agree-tos --no-eff-email -d {{ domain }}{% for item in subdomains_ports %} -d {{ item.split(':')[0] }}.{{ domain }}{% endfor %}"
        volumes:
          - "/etc/letsencrypt:/etc/letsencrypt"
          - "/var/lib/letsencrypt:/var/lib/letsencrypt"
          - "/var/log/letsencrypt:/var/log/letsencrypt"
          - "/var/www/html:/var/www/html"
          - "/etc/nginx:/etc/nginx"

  post_tasks:
    - name: Reload Nginx configuration inside the container
      community.docker.docker_container_exec:
        container: nginx
        command: nginx -s reload

