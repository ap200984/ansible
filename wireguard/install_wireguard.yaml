---
- name: Install and configure WireGuard server with peers
  hosts: all
  become: true
  vars:
    listen_port: 56685
    server_ip: "10.66.66.1"
    subnet: "10.66.66.0/24"
    interface_name: wg0
    server_private_key: "8DThCDSjwD15n6nApLUPD8cijXyeF28ImPXVmVoYY0M="
    peer_count: 2
    peer_base_ip: "10.66.66."

  tasks:
    - name: Install WireGuard and required tools
      apt:
        name:
          - wireguard
          - wireguard-tools
          - iptables
        state: present
        update_cache: yes

    - name: Ensure /etc/wireguard directory exists
      file:
        path: /etc/wireguard
        state: directory
        owner: root
        group: root
        mode: 0700

    - name: Ensure /etc/wireguard/peers directory exists
      file:
        path: /etc/wireguard/peers
        state: directory
        owner: root
        group: root
        mode: 0700

    - name: Install Python3 and pip
      apt:
        name:
          - python3
          - python3-pip
        state: present
        update_cache: yes


    - name: Install required Python modules
      pip:
        name:
          - qrcode[pil]
          - Pillow
        executable: pip3
        extra_args: "--break-system-packages"

    - name: Copy Python script to /etc/wireguard
      copy:
        dest: /etc/wireguard/generate_qr_codes.py
        content: |
          import qrcode
          import os

          # Path to the folder where peer configuration files are stored
          config_folder = "/etc/wireguard/peers"

          # Output folder for QR code images
          output_folder = "./qr_codes"
          os.makedirs(output_folder, exist_ok=True)

          # Iterate over each configuration file in the config folder
          for config_file in os.listdir(config_folder):
              if config_file.endswith(".conf"):
                  peer_name = config_file.split('.')[0]  # Get the peer name (e.g., "wg0")

                  # Read the configuration file content
                  with open(os.path.join(config_folder, config_file), 'r') as f:
                      config_content = f.read()

                  # Generate the QR code from the configuration content
                  qr = qrcode.QRCode(
                      version=1,
                      error_correction=qrcode.constants.ERROR_CORRECT_L,
                      box_size=10,  # Box size for PNG
                      border=4,
                  )
                  qr.add_data(config_content)
                  qr.make(fit=True)

                  # Create and save the QR code as an image file
                  img = qr.make_image(fill='black', back_color='white')
                  img_path = os.path.join(output_folder, f"{peer_name}.png")
                  img.save(img_path)
                  print(f"QR code image saved for {peer_name}: {img_path}")

                  # Now generate the QR code for terminal display with smaller box size
                  qr_terminal = qrcode.QRCode(
                      version=1,
                      error_correction=qrcode.constants.ERROR_CORRECT_L,
                      box_size=1,  # Smaller box size for terminal display
                      border=1,
                  )
                  qr_terminal.add_data(config_content)
                  qr_terminal.make(fit=True)

                  # Display the QR code in the terminal
                  print(f"QR code for {peer_name} (Terminal View):")
                  qr_terminal.print_ascii()
                  print("\n")

    - name: Generate server private key if not set
      command: "wg genkey"
      register: server_private_key_gen
      when: server_private_key == ''
      changed_when: true

    - name: Set server private key from generated key
      set_fact:
        server_private_key: "{{ server_private_key_gen.stdout }}"
      when: server_private_key == ''

    - name: Generate server public key
      shell: "echo {{ server_private_key }} | wg pubkey"
      register: server_public_key

    - name: Configure WireGuard server
      copy:
        dest: /etc/wireguard/{{ interface_name }}.conf
        content: |
          [Interface]
          Address = {{ server_ip }}/24
          ListenPort = {{ listen_port }}
          PrivateKey = {{ server_private_key }}
          PostUp = iptables -I INPUT -p udp --dport {{ listen_port }} -j ACCEPT
          PostUp = iptables -I FORWARD -i eth0 -o {{ interface_name }} -j ACCEPT
          PostUp = iptables -I FORWARD -i {{ interface_name }} -j ACCEPT
          PostUp = iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
          PostUp = ip6tables -I FORWARD -i {{ interface_name }} -j ACCEPT
          PostUp = ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
          PostDown = iptables -D INPUT -p udp --dport {{ listen_port }} -j ACCEPT
          PostDown = iptables -D FORWARD -i eth0 -o {{ interface_name }} -j ACCEPT
          PostDown = iptables -D FORWARD -i {{ interface_name }} -j ACCEPT
          PostDown = iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE
          PostDown = ip6tables -D FORWARD -i {{ interface_name }} -j ACCEPT
          PostDown = ip6tables -t nat -D POSTROUTING -o eth0 -j MASQUERADE
        owner: root
        group: root
        mode: 0600

    - name: Enable and start WireGuard service
      systemd:
        name: wg-quick@{{ interface_name }}
        enabled: yes
        state: started

    - name: Generate private key for each peer
      command: "wg genkey"
      loop: "{{ range(1, peer_count + 1) | list }}"
      loop_control:
        loop_var: peer_num
      register: peer_private_keys

    - name: Generate public key for each peer
      command: "wg pubkey"
      args:
        stdin: "{{ item.stdout }}"
      loop: "{{ peer_private_keys.results }}"
      loop_control:
        loop_var: item
      register: peer_public_keys

    - name: Generate preshared key for each peer
      command: "wg genpsk"
      loop: "{{ range(1, peer_count + 1) | list }}"
      loop_control:
        loop_var: peer_num
      register: peer_preshared_keys

    - name: Add peer configurations to WireGuard server
      lineinfile:
        path: /etc/wireguard/{{ interface_name }}.conf
        insertafter: EOF
        line: |
          [Peer]
          PublicKey = {{ item.stdout }}
          PresharedKey = {{ peer_preshared_keys.results[loop_index].stdout }}
          AllowedIPs = {{ peer_base_ip }}{{ loop_index + 2 }}/32
      loop: "{{ peer_public_keys.results }}"
      loop_control:
        index_var: loop_index
        loop_var: item

    - name: Create peer configuration files
      copy:
        dest: /etc/wireguard/peers/wg_client{{ loop_index }}.conf
        content: |
          [Interface]
          Address = {{ peer_base_ip }}{{ loop_index + 2 }}/24
          PrivateKey = {{ peer_private_keys.results[loop_index - 1].stdout }}

          [Peer]
          PublicKey = {{ server_public_key.stdout }}
          PresharedKey = {{ peer_preshared_keys.results[loop_index - 1].stdout }}
          Endpoint = {{ ansible_default_ipv4.address }}:{{ listen_port }}
          AllowedIPs = 0.0.0.0/0
          PersistentKeepalive = 21
      loop: "{{ peer_private_keys.results }}"
      loop_control:
        index_var: loop_index
        loop_var: item

    - name: Restart WireGuard to apply changes
      systemd:
        name: wg-quick@{{ interface_name }}
        state: restarted
